//use "time"
//use "ponytest"
/*
 *
 * execute in context of a UnitTest
 *
 * trait Property is UnitTest
 *      ... translate UnitTest calls to Property calls ...
 *
 *    fun apply(h: TestHelper) =>
 *
 *
 * trait PropertyHelper
 *    new create(h': TestHelper) =>
 *       h = h'
 *    // mirror testhelper api
 *    // but only report to testhelper the property verification result
 *
 * class MyProp is Property1[T]
 *
 *      def size(): USize = 10
 *
 *      def gen(): Generator[T]
 *
 *      def property(arg1: T, h: PropertyHelper) =>
 *          // CODE UNDER TEST
 *
 *
 * Alternate syntax:
 *
 * class MyTest is UnitTest
 *
 *     fun apply(h: TestHelper) =>
 *         Ponycheck.forAll(Generator.unit[U8](0))({(u: U8) =>
 *             h.assert_eq(u, 0)
 *         })
 *
 */

/*
class _ForAll[T]
    let gen: Generator[T]

    new create(gen': Generator[T]) =>
        gen = gen'

    fun apply(prop: {(T)}): Property1[T] =>
        """
        take the generator
        """

primitive Properties
    fun forAll(gen: Generator[T]): Property1[T]
*/
/*
actor Main
    new create(env: Env) =>
        env.out.print("ponycheck")
        let gen = Generators.u8(U8(1), U8(21))//.map[I32]({(u: U8): I32 => I32(u.i32()-1)})
        let rnd = Randomness(U64(Time.millis()))
        let si: String iso = recover
            let s = String.create(3)
            s.append("abc")
            s
        end
        let static: Generator[String tag] = Generators.unit[String iso](consume si)
        let sg: String tag = static.generate(rnd)
        env.out.print("STATIC: " + (static.generate(rnd) is "abc").string())
        env.out.print("STATIC: " + (static.generate(rnd) is "").string())
        //let mapped = static.map[Bool]({(s: String tag): Bool => (s is s)})
        //env.out.print("MAPPED: " + mapped.generate(rnd).string())
        let filtered = gen.filter({(u: U8): (U8, Bool) => (u, (u%2) == 0) })
        env.out.print(gen.generate(rnd).string())
        env.out.print(filtered.generate(rnd).string())
        env.out.print(filtered.generate(rnd).string())
        env.out.print(filtered.generate(rnd).string())
        env.out.print(filtered.generate(rnd).string())
        

        let static2 = Generators.unit[(I32, String)]((I32(-1), "foo"))

        let propList = PropList.create(env)
*/
